@sysconfdir@ in mk-configure.7
MAKEVERBOSE
.lua.luac:
${PRINTOBJDIR}

Plan -2)

  Compiler/linker specific HARDENING_CFLAGS/LDFLAGS!

  OBJDIR_<subprj> for mkc.sub{prj,dir}.mk

  Do not cache negative results for MKC_REQUIRE_*

  Slides for:
    - SYSCONFDIR -> hello_world example
    - How it works section for EXPORT_SYMBOLS
    - Sample of cross-compilation
    - Slide "extensibility" about Lua module.

============================================================
Plan -1)

  - MKC_REQUIRE_* -> no need for -DHAVE_*
  - ./configure written in shell?
  - EXPORT_DYNAMIC_SYMBOLS - add the specified symbols to
    dynamic symbol table (GNU ld)
  - EXPORT_SYMBOLS_REGEXP
  - mkc_check_compiler: ${CC} -E
  - PCNAME.lua or LUA_PCNAME?
  - recheck documentation for Makefile.rec
  - SPROG?
  - Syllable, Haiku OSes and HURD
  - lcc and tcc compilers
  - epm -> rpm, SVR4 pkg etc.
  - more powerful link.me
  - mkc_imp.filelist.mk
    - FL_NOPREFIX
    - FL_PERSUBPRJ

============================================================
Plan 0)

  - disable caching for "negative" results
    for MKC_REQUIRE_xxx features.

  = Reimplement linkme.mk as a recommended way
    to organize local linking. It is not flexible enough.

  = shared libraries support for IRIX

  = sample for home-made .mk file (Ocaml? Pike?)

  = pass -O1 to gnu linker

============================================================
Plan 1)

  = MKSTRIP?

  = marker for user's curstom tests that
    run generated executables, i.e. not ready
    for cross-compilation

  = symlinks to executables and libraries in ${OBJDIR}/{bin,lib}

  = support for gettext

  = xxxDIR variable for /var

  = mkclint?

  = Implement mkc_imp.libtool.mk to build
    the shared libraries using GNU libtool(1).

  = Command line may be limited in size.
    Save defines to config.h and set HAVE_CONFIG_H to 1
    for compiling.

  = MKC_NEED_FUNCLIBS - the same as MKC_SOURCE_FUNCLIBS but
    implementation is taken from mk-c.
    Ex: MKC_NEED_FUNCLIBS += strlcat strlcpy getline

  = MKC_CUSTOM_premk, MKC_CUSTOM_postmk

  = Online tutorial

  = better support for cross-compilation
    - lalala
    - mkc_imp.pkg-config.mk (PKG_CONFIG_SYSROOT_DIR)

  = shared libraries support for AIX, UnixWare, Hurd, Haiku.
  = shared libraries support for nwcc, mipspro and other compilers.

  =    COPTS.<prog> and COPTS.lib<lib> variables
    or COPTS_<prog> and COPTS_lib<lib>?

  = Comparison with quagmire, kBuild, CMake, scons, waf, framewerk, pmk,
    MagicMakefiles, bjam, pymake etc.

  = Often compilers need special options to compile pthread code.
    Support for MKPTHREAD=yes|no is needed.

  = implement MANBZ2?

============================================================
Plan2)

  = EXPORT_SYMBOLS for HP-UX, AIX, SCO etc.

  = Single cache file as an automatically loaded (if exists)
    bmake makefile.

  = PROGS= a b c d
    SRCS.a = ...
    SRCS.b = ...

  = Targets bin_rpm, bin_epm
  = Targets src_tar, src_targz, src_tarbz2

  = man page for mkc_check_compiler

  = MKPIE for building Position Independent Executables

  = mkc.subdir.mk:
    - continue bulding even if some subprojects failed

  = mkc.subdir.mk, mkc.subprj.mk: reimplement ${dir}.${MACHINE}

  = MKC_CHECK_CUSTOM:
    - MKC_CUSTOM_FN=xxx.f
    - MKC_CUSTOM_FN=xxx.objc

  = user-defined postinstall and preinstall?

  = Regression tests:
    - optional .f tests
    - optional .p tests
    - optional(!) glib2 tests

  = Improve support for C++, Objective-C, Fortran and Pascal

  = Implement mkc.qt.mk

  = Implement mkc.doxygen.mk?

============================================================
Plan 3)

  = mkc.configure.mk functionality but for bourne shell, e.g.

    Upstream creates ./configure shell script:
      MKC_CONFIG_MK=mkc_config.mk
      MKC_CONFIG_H=mkc_config.h

      MKC_CHECK_HEADERS='
        header1.h
        header2.h
        header3.h'
      MKC_CHECK_FUNCLIBS='
        func1:lib1
        func2
        func3:lib3'
      #<...>
      . mkc_configure
      mkc_run # generating mkc_config.h and mkc_config.mk

    User runs
      ./configure ...
      <any>make all

  = MKC_CHECK_DECL_TYPE (define, function|variable)

  = MKC_DEFINE_01 - -DHAVE_XXX=0 or -DHAVE_XXX=1

============================================================
Plan 4)
  = MKC_BUILTINS (from autoconf):
      broken_free_NULL,
      exit_ret_int,
      isinf, isnan, malloc_0, putenv_xxx, realloc, signal,
      snprintf, sprintf, sscanf, strerror_r, strnlen,
      sysconf, unlink, unsetenv, va_copy, va_list,
      signed_shr, int_div, chown_minus_1,...
      (autoconf.info/Particular Function Checks)

      AC_FUNC_ALLOCA
  = autoconf (Portability of headers)
  = autoconf (Particular Header Checks)
