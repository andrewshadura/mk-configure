============================================================
Plan 1)

  = Online tutorial

  = Rewrite README

  = 'bmake depend' and/or automatic generating .d files
    using mkdep(1) or makedepend(1).
    This is a "must have" features for real life development.

  = PROGS= a b c d
    SRCS.a = ...
    SRCS.b = ...

    Sometimes it is easier to handle...

  = support for cross-compilation

  = improve shared libraries support, HP-UX, AIX, QNX, UnixWare,
    OSF1, Hurd etc.

  = improve support for different compilers, OSes, linkers,
    hardware etc.

  = mkc_install - portable BSD licensed replacement
                  for broken/absent native install(1)

  = mkc_mkdir-p - portable BSD licensed "mkdir -p"

  =    COPTS.<prog> and COPTS.lib<lib> variables
    or COPTS_<prog> and COPTS_lib<lib>?

  = MLINKS?

  = Comparison with quagmire, kBuild, CMake, scons, waf, framewerk, pmk,
    MagicMakefiles etc.

  = Formatted output
     CC: source.c
     CXX: source.cc
     FC: source.f
     PC: source.p
     LD: source.a, source.so, source.dylib
     nroff: source.a, source.so, source.dylib
     ...

  = Improve mkc.pkg-config.mk

  = Implement mkc_imp.libtool.mk to make building
    the shared libraries really portable (just a fallback).

  = Implement mkc.subprjs.mk supporting dependency graph...

  = Often compilers need special options to make pthread code.
    Support for MKPTHREAD=yes|no is needed.

============================================================
Plan2)

  = MKC_CHECK_CUSTOM:
    - MKC_CUSTOM_FN=xxx.f
    - MKC_CUSTOM_FN=xxx.objc

  = Regression tests:
    - optional .f tests
    - optional .p tests
    - optional(!) glib2 tests

  = implement MANBZ2?

  = Improve support for C++, Objective-C, Fortran and Pascal

  = Implement mkc.qt.mk

  = Implement mkc.doxygen.mk?

  = ??? (environment is limited in size) ???

============================================================
Plan 3)

  = mkc.configure.mk functionality but for bourne shell, e.g.

    Upstream creates ./configure shell script:
      MKC_CONFIG_MK=mkc_config.mk
      MKC_CONFIG_H=mkc_config.h

      MKC_CHECK_HEADERS='
        header1.h
        header2.h
        header3.h'
      MKC_CHECK_FUNCLIBS='
        func1:lib1
        func2
        func3:lib3'
      #<...>
      . mkc_configure
      mkc_run # generating mkc_config.h and mkc_config.mk

    User runs
      ./configure ...
      <any>make all
