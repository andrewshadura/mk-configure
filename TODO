= COPTS, COPTS.<prog> and COPTS.lib<lib> variables=
= MLINKS?
= LIBISPRIVATE variable
= mk-files supports building the shared libraries only by GNU cc and
  GNU ld, and therefore mk-configure is also limited to them.  This is
  bad news and needs to be fixed ASAP.

= Improve support for C++ and Fortran

= Comparison with kBuild, CMake, scons, waf, framewerk, pmk, etc.

= MKC_CHECK_BIGENDIAN

= Formatted bmake's output

= Improve mkc.pkg-config.mk

= Implement mkc.libtool.mk to make building
  the shared libraries really portable

= Implement mkc.qt.mk

= Implement mkc.subprjs.mk supporting dependency graph etc.

= Implement mkc.doxygen.mk?

= mkc.lib.mk fails to build shared library under Solaris and Darwin
  and some other

= ??? (environment is limited in size) ???

= Closer integration with Simon Gerraty's Mk files.
   More testing is needed.

=
     - With a help of MKC_CHECK_DEFINES (Ex: MKC_CHECK_DEFINES+=__GNUC__)
       mk-configure is able to detect the compiler at run-time.
       This makes possible to make SHLIB_xxx (bsd.lib.mk) portable
       to other compilers. Currently bsd.lib.mk (SHLIB_xxx) supports
       only GCC.
     - Often compilers need special options to make pthread code.
       Support for MKPTHREAD=yes|no is needed.
     - Support for libtool in addition to native bsd.{lib,prog}.rules.
       User's side variable USE_LIBTOOL=yes|no.

= mkc.configure.mk functionality but for bourne shell, e.g.

   Upstream creates ./configure script:
     MKC_CONFIG_MK=mkc_config.mk
     MKC_CONFIG_H=mkc_config.h

     MKC_CHECK_HEADERS='
        header1.h
        header2.h
        header3.h'
     MKC_CHECK_FUNCLIBS='
        func1:lib1
        func2
        func3:lib3'
     #<...>
     . mkc_configure
     mkc_run # generating mkc_config.h and mkc_config.mk

   User runs
     ./configure ...

= MKC_REQD - user settable variable for specifing minimal required
   version of mk-configure

=
   MKC_NOAUTO_abcdefg...
