#!/bin/sh

# Copyright (c) 2009, Aleksey Cheusov <vle@gmx.net>
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
# ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# usage: mkc_check_decl <define|variable|func[0-9]|type|struct> <what?> [includes...]

set -e

##################################################
# initializing

LC_ALL=C
export LC_ALL

MKC_CACHEDIR=${MKC_CACHEDIR:=.}
CC=${CC:=cc}

pathpart=`echo $* | tr '/. ' ___`

decltype=`echo $1 | sed 's/[0-9]//g'`
argscnt=`echo $1 | sed 's/[^0-9]//g'`
shift

declwhat=$1
shift

tmpc=$MKC_CACHEDIR/_mkc_${pathpart}.c
tmpo=$MKC_CACHEDIR/_mkc_${pathpart}.o
tmperr=$MKC_CACHEDIR/_mkc_${pathpart}.err
cache=$MKC_CACHEDIR/_mkc_${pathpart}.res

##################################################
# functions

printme (){
    if test -z "$MKC_VERBOSE"; then
	return
    fi

    if test "_$MKC_SHOW_CACHED" = _1 || test -z "$cached"; then
	printf "$@"
    fi
}

##############################
get_includes (){
    for i in $MKC_COMMON_HEADERS "$@"; do
	echo "#include <$i>"
    done
}

##############################
compile (){
    if "$CC" -c -o "$tmpo" $MKC_COMMON_DEFINES \
	$CPPFLAGS $CFLAGS "$tmpc" 2>"$tmperr"
    then
	return 0
    else
	return 1
    fi
}

##############################
is_define (){
    get_includes "$@" > "$tmpc"

    cat >> "$tmpc" <<EOF
#if defined($declwhat)
int main ()
{
   return 0;
}
#else
.error "$declwhat is not a define"
#endif
EOF

    #
    compile
}

##############################
is_variable (){
    get_includes "$@" > "$tmpc"

    cat >> "$tmpc" <<EOF
int main ()
{
   return sizeof (($declwhat)) && (&$declwhat != 0);
}
EOF
    #
    compile
}

##############################
try_type (){
    get_includes "$@" > "$tmpc"

    cat >> "$tmpc" <<EOF
int main ()
{
   return sizeof ($declwhat);
}
EOF

    #
    compile
}

##############################
is_type (){
    try_type "$@" || return 1
    is_variable "$@" && return 1
    return 0
}

##############################
is_func (){
    get_includes "$@" > "$tmpc"

    cat >> "$tmpc" <<EOF
void func (void)
{
   if (${declwhat}) return 0;
   ${declwhat} (
EOF

    awk -v N="$argscnt" '
BEGIN {
   for (i=0; i < N; ++i){
      if (i)
         printf ","
      printf "0"
   }
}
' >> "$tmpc"

    printf ');\n}\n' >> "$tmpc"

    #
    compile
}

##################################################
# test

printme '%s' "checking for $decltype ${declwhat}${incs_msg}... " 1>&2

for i in "$@"; do
    incs_msg="$incs_msg $i"
done

if test -n "$incs_msg"; then
    incs_msg=" ($incs_msg )"
fi

if test -z "$MKC_NOCACHE" && test -f "$cache"; then
    printme '(cached) ' 1>&2
    ret=`cat "$cache"`
else
    # test itself
    if eval is_${decltype} "$@"
    then
	ret=1
    else
	ret=0
    fi
    echo $ret > "$cache"
fi

##################################################
# clean-ups

rm -f "$tmpo"
if test "$MKC_DELETE_TMPFILES" = 1; then
    rm -f "$tmpc" "$tmperr"
fi

##################################################
# finishing

if test "$ret" -eq 1; then
    printme 'yes\n' 1>&2
else
    printme 'no\n' 1>&2
fi

echo $ret
