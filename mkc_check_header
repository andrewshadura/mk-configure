#!/bin/sh

# Copyright (c) 2009, Aleksey Cheusov <vle@gmx.net>
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
# ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# usage: mkc_check_header <header.h>

set -e

LC_ALL=C
export LC_ALL

##################################################
# initializing

pathpart=`echo $1 | tr /. __`

MKC_CACHEDIR=${MKC_CACHEDIR:=.}
CC=${CC:=cc}

tmpc=$MKC_CACHEDIR/_mkc_header_${pathpart}.c
tmpo=$MKC_CACHEDIR/_mkc_header_${pathpart}.o
tmperr=$MKC_CACHEDIR/_mkc_header_${pathpart}.err
cache=$MKC_CACHEDIR/_mkc_header_${pathpart}.res

printme (){
    if test "_$MKC_SHOW_CACHED" = _1 || test -z "$cached"; then
	printf "$@"
    fi
}

##################################################
# test

printme '%s' "checking for header $1... " 1>&2

if test -z "$MKC_NOCACHE" && test -f "$cache"; then
    printme '(cached) ' 1>&2
    ret=`cat "$cache"`
else
    # preparations
    cat > "$tmpc" <<EOF
#include <$1>
int main ()
{
   return 0;
}
EOF

    # test itself
    if "$CC" -c -o "${tmpo}" $CPPFLAGS $CFLAGS "${tmpc}" 2>"${tmperr}"
    then
	echo 1 > "$cache"
	ret=1
    else
	echo 0 > "$cache"
	ret=0
    fi
fi

##################################################
# clean-ups

rm -f "$tmpo"
if test "$MKC_DELETE_TMPFILES" = 1; then
    rm -f "$tmpc" "$tmperr"
fi

##################################################
# finishing

if test "$ret" -eq 1; then
    printme 'yes\n' 1>&2
else
    printme 'no\n' 1>&2
fi

echo $ret
