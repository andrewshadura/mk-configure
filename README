-------------------------------------------------------------------------
WHAT IS MK-CONFIGURE?

mk-configure is a lightweight replacement for GNU autotools, written
in and for bmake (portable version of NetBSD make) and UNIX tools
(shell, awk etc.).  FreeBSD and OpenBSD make are not good. They are
incompatible with NetBSD bmake. GNU make is not good too, it is
completely incompatible with NetBSD bmake. Note for NetBSD users: I'd
recommend to use latest stable version of bmake. Old bmake may not
work, e.g., /usr/bin/make shipped with NetBSD-2.0 is not supported.

mk-configure provides a number of include files written in and for
bmake and a number of standalone programs that should be installed to
user's host for building a software.

-------------------------------------------------------------------------
GOALS OF THE PROJECT

 - No code generation! Library approach is used instead.  Instead of
   generating tons of unreadable blobs mk-configure uses bmake include
   files (bmake's libraries) and external executables to make its job.
   Developers should distribute source code only, not blobs.

 - Single top level command for building a software, bmake in our
   case. Instead of running and learning
   autoconf/automake/aclocal/autoreconf/config.status/autoheader and
   many other tools and the way they interact with each other you
   should learn only ONE tool, bmake.

 - No bloat. At this time mk-configure consists of far less than 10000
   lines of code (excluding examples and regression tests). Compare
   this number with autotools sources and you'll see a difference.

 - Simplicity for both developers and users. The only file developer
   should be aware of during development is 'Makefile'.  Users just
   run 'env <options> bmake all <options>' to build a software. The
   same for developers -- for building a software, just run 'bmake'.

 - Portability. At the moment the following systems and compilers are
   supported:

    - NetBSD. Tested under NetBSD-5.0/x86 and NetBSD-2.0/alpha with
      gcc and pcc (Portable C compiler).

    - FreeBSD. Tested under FreeBSD-6.2/x86, FreeBSD-7.1/spark64 and
      FreeBSD-7.1/x86 with gcc.

    - OpenBSD. Tested under OpenBSD-4.6/x86 with gcc.

    - Solaris. Tested under Solaris-10/x86 with Sun Studio 11 and gcc.

    - Darwin (MacOS-X). Tested under Darwin-8.11.0/ppc (MacOS-X Tiger)
      with native gcc.

    - Interix. Tested under Interix-3.5/x86 with native gcc.

    - Partial support for AIX and HP-UX and their native
      compilers. Support is not complete because I have no access to
      "big iron" :-( .

    If you don't see your favourite system/compiler here and want to
    help me to improve mk-configure, feel free to contact
    me. mk-configure needs your help! ;-)

-------------------------------------------------------------------------
HOW TO USE MK-CONFIGURE?

 For developers:
    - Install bmake and sys.mk to your system.
    - Install mk-configure to your system.
    - Develop your software using bmake and mkc.*.mk include files
      provided by mk-configure.
    - Run 'bmake' or 'bmake all' for building your software.  You need
      not autoconf/autoheader/automake/aclocal/config.guess/
      /autoreconf/config.status/config.sub and blah-blah-blah.

      BMAKE is magic enough! ;-)

 For users and software packagers:
    - Install bmake and sys.mk your system.
    - Install mk-configure to your system.
    - Run bmake for building a software and pass to it
      the building options, e.g.

         env CC=pcc CFLAGS='-O0 -g' PREFIX=/opt/software \
              bmake all install

      There is no need for configure script and analogs.

      BMAKE is magic enough! ;-)

-------------------------------------------------------------------------
WHAT'S WRONG WITH GNU AUTOTOOLS (IN SHORT)?

 1) Autotools are toooooo big and toooooo complex.  I fear most free
   and open source developers do not understand how to use autotools
   in a proper way to make software REALLY portable.

 2) configure script generated by autoconf is too big.  Trivial
   configure.ac results in hundreds of kilobytes of unreadable textual
   blobs.  What the hell?

 3) The goal of autotools was to make building software easier.  But
   this goal makes development painfull.  Autotools is a hell for
   development/developers.  Too much of top-level commands: automake,
   autoconf, aclocal, autoheader...  All its functionality can be
   implemented using one top-level command -- bmake. Autotools is also
   a well known source of headaches for users and software packagers.

 4) In theory, configure script generated by autoconf is portable
   because it is written in portable shell. In practice this is not
   always true. Users aften need to update autoconf for regenerating
   an upstream configure scripts. They also often need to patch a
   configure and Makefile blobs.

 5) autoconf doesn't support efficient results caching from different
   projects. In theory this can make building thousands of projects
   (e.g. software packages in OS distributions) drammatically faster.

 6) configures script generated by autoconf are too slow even on
   modern hardware and systems having fast fork(2) system call
   (notably *BSD and Linux).

 7) Many (most?) real-life configure.ac break the cross-compiling.

 8) In my view autotools (automake and autoconf) is BADLY designed.  I
   personally dislike code generation idea because it is ... extreamly
   ugly :-/ approach even if the generated code is claimed to be
   "portable".  Today it is not a problem to install any kind of
   software building tools and to them more efficiently.

-------------------------------------------------------------------------
WHAT MK-CONFIGURE PROVIDES?

- mkc.{files,lib,prog,subdir}.mk files.

      These include files are responsible for building, installing and
      uninstalling the applications, static and shared libraries,
      scripts, plain files, mand and info pages, hard and soft links
      etc...  Note for *BSD users: unlike well known mk files in *BSD
      systems mkc.*.mk, files provide the following features.  THIS
      LIST OF DIFFERENCES IS NOT COMPLETE, SEE mk-configure.7 FOR
      DETAILS.

      - PREFIX, BINDIR, MANDIR etc. variables default to
        /usr/local/xxx.  By default bsd.*.mk are set to /usr because
        they are used mainly for *BSD's own code.

      - BINOWN, BINGRP, MANOWN etc. variables are set to 'id -u' and
        'id -g' if bmake is run under an unprivileged user.
        By default bsd.*.mk use root and wheel by default.

      - A target 'install' installs include files, info pages and
        others not installed by default by bsd.*.mk files.

      - A target 'installdirs' creates all required destination
        directories. bsd.*.mk files do not create them at all.

      - A target 'uninstall' removes all installed files from
        destination directories. bsd.*.mk files do not provide such a
        target.

      - A target 'test' of mkc.subdir.mk (by default) runs a "test"
        target for each subdirectory listed in SUBDIR. Other mkc.*.mk
        files provide "test" target too but does nothing by default.
        If you want to test your application, define your own "test"
        target in application's Makefile.

      - DPLIBDIRS variable, if set, contains a list of directories of
        the libraries your project depends on. If this variable is
        set, LDFLAGS is modified accordingly. See examples/ projects.

      - "cleandir" and "distclean" targets that removes all temporary
        files and mk.configure.mk's cache files.

      - support for texinfo/info files. There is no need to .include
        a special include files such as <bsd.info.mk> file.

      - other additions and improvements.

- mkc.intexts.in

  Given a list of files in INFILES or INSCRIPTS mkc.intexts.mk
  generates them from appropriate *.in file replacing @prefix@,
  @sysconfdir@, @libdir@, @bindir@, @sbindir@, @datadir@ etc. with
  real ${PREFIX}, ${SYSCONFDIR} etc. See examples/ subdirectory for
  the samples.

- mkc.configure.mk script which is a replacement for GNU autoconf. Its
  documentation is large enough to describe here.  It short, it allows
  to check for presense of header files, function or variable
  declarations, presense of function in a particular library, defines,
  sizeof of data types and other useful things. Read the documentation
  in mk-configure.7 and see examples/ subdirectory for the samples of
  use.

- Standalone full-functional
  mkc_check_{funclib,header,sizeof,decl,prog,custom} and other
  programs that can be used without bmake and without mkc.*.mk files.
  Read appropriate man pages.

-------------------------------------------------------------------------
DOCUMENTATION:

   - Instead of screenshots :-) I've prepared lots of samples under
     examples/ subdirectory.

   - Documentation for bmake's include files is in mk-configure(7).

   - Most programs (mkc_check_{decl,header,funclib,sizeof,prog,custom})
     have -h option and manual page.

   - Read the FAQ document. It may be helpful.

-------------------------------------------------------------------------
IS MK-CONFIGURE STABLE?

"mk-configure" is currently in alpha stage of development.

!!! API IS NOT STABLE YET AND MAY BE CHANGED IN THE NEXT RELEASE !!!

IF YOU WANT TO HELP ME STABILIZE IT,
SEND YOUR SUGGESTIONS AND IDEAS TO ME AS SOON AS POSSIBLE ;-)

Also mk-configure is not feature-complete yet, see TODO file for details.

-------------------------------------------------------------------------
INSTALLATION:

   1) Install bmake to your system.
      Sources are available here.

        ftp://ftp.NetBSD.org/pub/NetBSD/misc/sjg/
        http://www.crufty.net/help/sjg/bmake.html

   2) Install sys.mk to mk files directory. Under *BSD systems
      /usr/share/mk/sys.mk is good enough. sys.mk is not required by
      mk-configure but is required by bmake. Under non-BSD systems
      including Linux and Solaris it makes sense to install sys.mk
      provided by mk-configure. NOTE: "bmake install" will *NOT*
      install sys.mk. For packagers: in my view it makes sense to make
      sys.mk file a part of bmake package.

   3)
      cd  mk-configure-X.Y.Z/
      export PREFIX=/usr/local MKFILESDIR=/usr/local/share/mk
      bmake all
      bmake test # For testing mk-configure, this step is optional.
                 # Note that testing requires lex(1), yacc(1),
                 # pkg-config(1), glib2 library and other things
                 # that are not mandatory for using mk-configure.
                 # If "bmake test" fails on your platform, please let
                 #  me know.
      bmake installdirs install

      Of course, you can change /usr/local to whatever you want.
      PREFIX defaults to /usr/local, MKFILESDIR -- to /usr/local/share/mk

      On platforms having no BSD compatible install(1)
      you may install mk-configure by running

      env PATH=$PWD:$PATH bmake installdirs install

  If you use pkgsrc (cross platforms packaging system), you may find
  a package for latest mk-configure in wip/mk-configure.

-------------------------------------------------------------------------
FEEDBACK

Send all your suggestions, bug reports etc.
to Aleksey Cheusov <vle@gmx.net> or register them at project's site
http://sourceforge.net/projects/mk-configure/

For free subscription for mk-configure releases, visit
http://freshmeat.net/projects/mk-configure/

Feel free to notify me about spelling errors in the documentation.
English is not my first language. If you want to participate the
project, let me know.

-------------------------------------------------------------------------
