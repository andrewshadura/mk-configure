# Copyright (c) 2009, Aleksey Cheusov <vle@gmx.net>
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
# ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

######################################################################
# MKC_CHECK_HEADERS
#       List of headers to be checked.
#
#       As a result of the check bmake's variable
#       HAVE_HEADER.header is set to either 0 or 1
#       (tr|./|__|g in the header).
#
#       Also -DHAVE_HEADER_<HEADER>=(0 or 1)
#       is added to CFLAGS unless MKC_NOAUTO is set to 1
#       (tr|a-z./|A-Z__|g in the <HEADER>).
#
#   Ex:  MKC_CHECK_HEADERS += sys/time.h fcntl.h execinfo.h
#   Res: HAVE_HEADER.sys_time_h = 1
#        HAVE_HEADER.fcntl_h    = 1
#        HAVE_HEADER.execinfo_h = 1
#        CFLAGS += -DHAVE_HEADER_SYS_TIME_H=1 \
#                  -DHAVE_HEADER_FCNTL=1
#
# MKC_CHECK_FUNCLIBS
#       List of function:library pairs to be checked,
#       library part is optional. If <library> part is present,
#       presense of <function> in libc is also checked automatically.
#
#       As a result of the check bmake's variable
#       HAVE_FUNCLIB.<function>.<library> (or HAVE_FUNCLIB.<function>)
#       is set to either 0 or 1.
#
#       By default, if <function> is present in <library> but not in libc,
#       "-l<library>" is automatically added to LDADD unless
#       function:library is listed in MKC_NOAUTO_FUNCLIBS or
#       MKC_NOAUTO_FUNCLIBS is equal to 1 or
#       MKC_NOAUTO is set to 1
#
#   Ex:  MKC_CHECK_FUNCLIBS  += strlcat fgetln getline getopt_long
#        MKC_CHECK_FUNCLIBS  += crypt:crypt dlopen:dl nanosleep:rt
#        MKC_CHECK_FUNCLIBS  += ftime:compat gettimeofday
#        MKC_NOAUTO_FUNCLIBS += ftime:compat
#   Res: HAVE_FUNCLIB.strlcat      = 1
#        HAVE_FUNCLIB.fgetln       = 1
#        HAVE_FUNCLIB.getline      = 0
#        HAVE_FUNCLIB.getopt_long  = 1
#        HAVE_FUNCLIB.crypt        = 0
#        HAVE_FUNCLIB.crypt.crypt  = 1
#        HAVE_FUNCLIB.dlopen       = 1
#        HAVE_FUNCLIB.dlopen.dl    = 0
#        HAVE_FUNCLIB.nanosleep    = 1
#        HAVE_FUNCLIB.nanosleep.rt = 1
#        HAVE_FUNCLIB.ftime        = 0
#        HAVE_FUNCLIB.ftime.compat = 1
#        HAVE_FUNCLIB.gettimeofday = 1
#        LDADD += -lcrypt
#
# MKC_SOURCE_FUNCLIBS
#       The same as MKC_CHECK_FUNCLIBS, but if <function> is absent
#       both in the specified <library> and in libc, function.c is
#       added to SRCS unless MKC_NOAUTO=1.
#
# MKC_CHECK_DEFINES
#       List of define:header to be checked. <header> part is optional.
#
#       As a result of the check bmake's variable
#       HAVE_DEFINE.<define>.<header> (or HAVE_DEFINE.<define>)
#       is set to either 0 or 1.
#       (tr|./|_.|g in the <header>).
#
#       Also -DHAVE_DEFINE_<DEFINE>_<HEADER>=1
#       or   -DHAVE_DEFINE_<DEFINE>=1
#       is added to CFLAGS if the specified define was detected
#       unless MKC_NOAUTO is set to 1
#       (tr|a-z./|A-Z__|g in <HEADER>,
#        tr|a-z|A-Z|g     in <DEFINE>).
#
#   Ex:  MKC_CHECK_DEFINES += RTLD_LAZY:dlfcn.h __GNUC__ _MSC_VER_
#   Res: HAVE_DEFINE.RTLD_LAZY.dlfcn_h = 1
#        HAVE_DEFINE.__GNUC__          = 1
#        HAVE_DEFINE._MSC_VER_         = 0
#        CFLAGS += -DHAVE_DEFINE_RTLD_LAZY_DLFCN_H=1 \
#                  -DHAVE_DEFINE___GNUC__=1
#
# MKC_CHECK_VARS
#       List of variable:header to be checked. <header> part is optional.
#       
#       As a result of the check bmake's variable
#       HAVE_DEFINE.<variable>.<header> (or HAVE_DEFINE.<variable>)
#       is set to either 0 or 1
#       (tr|./|_.|g in the <header>).
#
#       Also -DHAVE_DEFINE_<VARIABLE>_<HEADER>=1
#       or   -DHAVE_DEFINE_<VARIABLE>=1
#       is added to CFLAGS if the specified variable was detected
#       unless MKC_NOAUTO is set to 1
#       (tr|a-z./|A-Z__|g in <HEADER>).
#
#   Ex:  MKC_CHECK_VARS += sys_errlist:errno.h
#   Res: HAVE_VAR.sys_errlist.errno_h = 1
#        CFLAGS += -DHAVE_VAR_SYS_ERRLIST_ERRNO_H
#
# MKC_CHECK_FUNCS<N>
#       List of func:header to be checked. <header> part is optional.
#       
#       As a result of the check bmake's variable
#       HAVE_FUNC<N>.<func>.<header> (or HAVE_FUNC<N>.<func>)
#       is set to either 0 or 1
#       (tr|./|_.|g in the <header>).
#
#       Also -DHAVE_FUNC<N>_<FUNC>_<HEADER>=(0 or 1)
#       or   -DHAVE_FUNC<N>_<FUNC>=(0 or 1)
#       is added to CFLAGS if the specified function was detected
#       unless MKC_NOAUTO is set to 1
#       (tr|a-z./|A-Z__|g in <HEADER>).
#
#   Ex:  MKC_CHECK_FUNCS2 += fgetln:stdio.h
#        MKC_CHECK_FUNCS6 += pselect:sys/select.h
#   Res: HAVE_FUNC2.fgetln.stdio_h = 1
#        HAVE_FUNC6.pselect.sys.select_h = 1
#        CFLAGS += -DHAVE_FUNC2_FGETLN_STDIO_H=1 \
#               += -DHAVE_FUNC6_PSELECT_SYS_SELECT_H=1
#
# MKC_CHECK_SIZEOF
#       List of type:header to be checked. <header> part is optional.
#
#       As a result of the check bmake's variable
#       SIZEOF.<type> (or SIZEOF.<type>.<header>)
#             is set to the data type size or `failed' string.
#       (tr|*-|P_|g in <type>, tr|/.|__|g in <header>).
#
#       Also -DSIZEOF_<TYPE>=<failed|1|2|...>
#         (or -DSIZEOF_<TYPE>_<HEADER>=<failed|1|2|...>)
#       is added to CFLAGS unless MKC_NOAUTO is set to 1
#       (tr|a-z*-|A-ZP_|g in <TYPE>, tr|a-z/.|A-Z__|g in <HEADER>)
#       if sizeof() check was successful.
#
#   Ex:  MKC_CHECK_SIZEOF += void*
#        MKC_CHECK_SIZEOF += long-long off_t:sys/types.h
#   Res: SIZEOF.voidP             = 4
#        SIZEOF.long_long         = 4
#        SIZEOF.off_t.sys_types_h = 8
#        CFLAGS += -DSIZEOF_VOIDP=4 \
#                  -DSIZEOF_LONG_LONG=4 \
#                  -DSIZEOF_OFF_T_SYS_TYPES_H=8
#
# MKC_NOAUTO_FUNCLIBS
#       See MKC_CHECK_FUNCLIBS
#
# MKC_NOAUTO
#       See MKC_CHECK_{HEADERS,FUNCLIBS,FUNCS,VARS,DEFINES,SIZEOF}.
#
# MKC_COMMON_HEADERS
#       List of header files always #include'd to the test .c files
#       in MKC_CHECK_{DEFINES,VARS,FUNCS<N>,SIZEOF} tests.
#       The default value is an empty list.
#   Ex: MKC_COMMON_HEADERS += unistd.h stdlib stdio.h string.h
#       MKC_CHECK_SIZEOF += offs_t size_t ssize_t
#
# MKC_COMMON_DEFINES
#       List of defines always passed to compiler
#       in MKC_CHECK_{DEFINES,VARS,FUNCS<N>,SIZEOF} tests.
#       By default list is empty.
#   Ex: MKC_COMMON_DEFINES += -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64 # Linux
#       MKC_COMMON_DEFINES += -D_ALL_SOURCE # Interix
# 
# MKC_CACHEDIR
#       Directory where intermediate and cache files are created.
#       It defaults to ${.OBJDIR}.
#       Setting this variable to something common for huge amount of
#       projects can save lots of time/energy wasted on unnecessary
#       rechecking. Idea: to use hash from options passed to compiler
#       for calculating the cache directory
#       ( remove -Wxxx etc. + sort + uniq + crc32/md5/...).
#
# MKC_SHOW_CACHED
#        Set it to 0 when working with mk-configure-based Makefile
#        interactively. This will hide annoying messages about
#        fetching test result from the cache.
#
# MKC_DELETE_TMPFILES
#        If set to 1, temporary files are removed.
#
# MKC_SHELL
#        Shell interpreter for mkc_check_XXX scripts, defaults to /bin/sh
#
# MKC_NOCACHE
#        All results are cached unless MKC_NOCACHE variable is set
#        non-empty value

######################################################################
# system variables
MKC_VERSION=@@version@@

# user defined variables
MKC_SHOW_CACHED?=1       # set it to `0' to hide "...(cached)..." lines
MKC_DELETE_TMPFILES?=0   # set it to `1' to delete temporary files
MKC_CACHEDIR?=${.OBJDIR} # directory for cache and intermediate files
MKC_COMMON_HEADERS?=     # list of headers always #included
MKC_COMMON_DEFINES?=     # #defines
MKC_SHELL?=/bin/sh       # mainly for portability testing purposes
MKC_NOCACHE?=            # 1 or yes for disabling cache

#
CFLAGS+=		${MKC_COMMON_DEFINES}

#
_MKC_CPPFLAGS:=		${CPPFLAGS}
_MKC_CFLAGS:=		${CFLAGS}
_MKC_LDFLAGS:=		${LDFLAGS}
_MKC_LDADD:=		${LDADD}

mkc.environ=CC='${CC}' CPPFLAGS='${_MKC_CPPFLAGS} ${MKC_COMMON_DEFINES}' CFLAGS='${_MKC_CFLAGS}' LDFLAGS='${_MKC_LDFLAGS}' LDADD='${_MKC_LDADD}' MKC_CACHEDIR='${MKC_CACHEDIR}' MKC_COMMON_HEADERS='${MKC_COMMON_HEADERS}' MKC_DELETE_TMPFILES='${MKC_DELETE_TMPFILES}' MKC_SHOW_CACHED='${MKC_SHOW_CACHED}' MKC_NOCACHE='${MKC_NOCACHE}' MKC_VERBOSE=1 MKC_SHELL='${MKC_SHELL}'

#
MKC_SOURCE_FUNCLIBS   ?=
_MKC_SOURCE_FUNCS=	${MKC_SOURCE_FUNCLIBS:C/:.*//}
#MKC_CHECK_HEADERS     ?=
#MKC_CHECK_SIZEOF      ?=
#MKC_CHECK_DEFINES     ?=
#MKC_CHECK_VARS        ?=

# checking for headers
.for h in ${MKC_CHECK_HEADERS}
HAVE_HEADER.${h:S|.|_|g:S|/|_|g}   !=   env ${mkc.environ} mkc_check_header ${h}
.if ${HAVE_HEADER.${h:S|.|_|g:S|/|_|g}}
MKC_CFLAGS  +=  -DHAVE_HEADER_${h:tu:S|.|_|g:S|/|_|g}=${HAVE_HEADER.${h:S|.|_|g:S|/|_|g}}
.endif
.endfor

# checking for functions in libraries
.for f in ${MKC_CHECK_FUNCLIBS} ${MKC_SOURCE_FUNCLIBS}
HAVE_FUNCLIB.${f:S/:/./g}!=	env ${mkc.environ} mkc_check_funclib ${f:S/:/ /g}
.if !defined(HAVE_FUNCLIB.${f:C/:.*//})
HAVE_FUNCLIB.${f:C/:.*//}!=	env ${mkc.environ} mkc_check_funclib ${f:C/:.*//}
.if empty(MKC_NOAUTO_FUNCLIBS:U:S/:/./g:M${f:S/:/./g}) && empty(MKC_NOAUTO_FUNCLIBS:U:M1) && ${HAVE_FUNCLIB.${f:S/:/./g}} && !${HAVE_FUNCLIB.${f:C/:.*//}}
MKC_LDADD+=-l${f:C/^.*://}
.endif
.endif
.if !${HAVE_FUNCLIB.${f:S/:/./g}} && !${HAVE_FUNCLIB.${f:C/:.*//}} && !empty(_MKC_SOURCE_FUNCS:M${f:C/:.*//})
MKC_SRCS+=${f:C/:.*//}.c
.endif
.endfor

# checking for sizeof(xxx)
.for t in ${MKC_CHECK_SIZEOF}
SIZEOF.${t:S|.|_|g:S|-|_|g:S|*|P|g:S|/|_|g:S|:|.|g}   !=   env ${mkc.environ} mkc_check_sizeof ${t:S/:/ /g}
.if ${SIZEOF.${t:S|.|_|g:S|-|_|g:S|*|P|g:S|/|_|g:S|:|.|g}} != failed
MKC_CFLAGS  +=  -DSIZEOF_${t:S/-/_/g:S| |_|g:S|*|P|g:S|:|_|g:S|.|_|g:tu}=${SIZEOF.${t:S|.|_|g:S|-|_|g:S|*|P|g:S|/|_|g:S|:|.|g}}
.endif
.endfor

# checking for declared #define
.for d in ${MKC_CHECK_DEFINES}
HAVE_DEFINE.${d:S/./_/g:S/:/./g}   !=   env ${mkc.environ} mkc_check_decl define ${d:S/:/ /g}
.if ${HAVE_DEFINE.${d:S/./_/g:S/:/./g}}
MKC_CFLAGS  +=  -DHAVE_DEFINE_${d:tu:S/:/_/g:S/./_/g}=1
.endif
.endfor

# checking for declared variables
.for d in ${MKC_CHECK_VARS}
HAVE_VAR.${d:S/./_/g:S/:/./g}   !=   env ${mkc.environ} mkc_check_decl variable ${d:S/:/ /g}
.if ${HAVE_VAR.${d:S/./_/g:S/:/./g}}
MKC_CFLAGS  +=  -DHAVE_VAR_${d:tu:S/:/_/g:S/./_/g}=1
.endif
.endfor

# checking for declared functions
.for n in 0 1 2 3 4 5 6 7 8 9
.for d in ${MKC_CHECK_FUNCS${n}}
HAVE_FUNC${n}.${d:S/./_/g:S/:/./g:S|/|.|g}   !=   env ${mkc.environ} mkc_check_decl func${n} ${d:S/:/ /g}
.if ${HAVE_FUNC${n}.${d:S/./_/g:S/:/./g:S|/|.|g}}
MKC_CFLAGS  +=  -DHAVE_FUNC${n}_${d:tu:S/:/_/g:S/./_/g:S|/|_|g}=1
.endif
.endfor
.endfor

# final assignment
.if !${MKC_NOAUTO:U0}
CFLAGS += ${MKC_CFLAGS}
LDADD  += ${MKC_LDADD}
SRCS   += ${MKC_SRCS}
.endif

# error check
CLEANFILES+=	.error-check

all : ${.OBJDIR}/.error-check
${.OBJDIR}/.error-check:
	@if test -z ${MKC_ERR_MSG}; then \
		touch $@; exit 0; \
	else \
		echo ${MKC_ERR_MSG}; exit 1; \
	fi
