#!/bin/sh

############################################################
# Copyright (c) 2009 by Aleksey Cheusov
#
# See COPYRIGHT file in the distribution.
############################################################

set -e

LC_ALL=C
export LC_ALL

##################################################
# options
usage (){
    cat <<EOF
mkc_check_custom - tries to compile source file specified by user,
   optionally builds and runs an application, and
   returns the result (1 - build succeded, 0 - build failed,
   other value returned by built application)

Usage:
 mkc_check_custom [OPTIONS] source_file

OPTIONS:
   -h|--help            display this help
   -r                   build an application and run it
Examples:
   mkc_check_custom my_custom_test.c
   mkc_check_custom -r mmap_works_perfectly.c
EOF
}

if test $# -eq 0; then
    usage
    exit 1
fi
if test "$1" = '-h' -o "$1" = '--help'; then
    usage
    exit 0
fi
if test "$1" = '-r'; then
    runit=1
    shift
fi
if test $# -ne 1; then
    usage
    exit 1
fi

##################################################
# initializing
basefn=`basename $1`
basefn=`echo ${basefn} | sed 's|[.]c$||'`
pathpart=custom_"$basefn"

. mkc_check_common.sh

tmpc="$1"

##################################################
# functions

compile (){
    if $CC -c -o "$tmpo" $CPPFLAGS $CFLAGS "$tmpc" 2>"$tmperr"; then
	echo 1
    else
	echo 0
    fi
}

check_itself (){
    compile
}

##################################################
# test

check_and_cache "checking for custom test ${basefn}" "$cache"

##################################################
# clean-ups

KEEP_SOURCE=1 # do not delete user's source file!
cleanup

##################################################
# finishing

if test "$ret" -eq 1; then
    printme 'yes\n' 1>&2
else
    printme 'no\n' 1>&2
fi

echo $ret
