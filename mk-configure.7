.\"	$NetBSD$
.\"
.\" Copyright (c) 2009 by Aleksey Cheusov (vle@gmx.net)
.\" Absolutely no warranty.
.\"
.\" ------------------------------------------------------------------
.de VB \" Verbatim Begin
.ft CW
.nf
.ne \\$1
..
.de VE \" Verbatim End
.ft R
.fi
..
.\" ------------------------------------------------------------------
.TH MK-CONFIGURE 7 "Sep 2, 2009" "" ""
.SH NAME
mk-configure \- lightweight replacement for GNU autotools
.SH DESCRIPTION
.B mk-configure
is a collection of mkc.*.mk files for bmake (portable version of
NetBSD make) and a number of executables. It is intended to simplify
crossplatform development and software building.
.SS "Targets"
.BR <mkc.prog.mk> ", " <mkc.lib.mk> ", " <mkc.files.mk> " and " <mkc.subdir.mk>
include files provide the following targets:
.IP all
build everything
.IP clean
clean temporary files created while building
.IP distclean
remove all of the files removed by the target clean, as
well as cache files created by
.B <mkc.configure.mk>
.IP cleandir
synonym for target "distclean"
.IP install-dirs
create target directories
.IP install
install programs, libraries, files, include files, manual pages etc.
to target directories
.IP uninstall
remove files from target directories
.IP error-check
checks for MKC_ERR_MSG variable and fails if it set printing
an error message
.SS "Common variables"
The following variables control how various files are compiled/built.
.IP AR
Create, modify, and extract from archives.  [ar]
.IP ARFLAGS
Options to ${AR}.  [rl]
.IP AS
Assembler.  [as]
.IP AFLAGS
Options to ${CC} when compiling or linking .s or .S
assembly source files.  []
.IP CC
C compiler.  [cc]
.IP CFLAGS
Options to ${CC}.  [Usually -O or -O2]
.IP CPP
C Pre-Processor.  [cpp]
.IP CPPFLAGS
Options to ${CPP}.  []
.IP CXX
C++ compiler.  [c++]
.IP CXXFLAGS
Options to ${CXX}.  [${CFLAGS}]
.IP FC
Fortran compiler.  [f77]
.IP FFLAGS
Options to {$FC}.  [-O]
.IP INSTALL
install(1) command.  [install]
.IP LEX
Lexical analyzer.  [lex]
.IP LFLAGS
Options to ${LEX}.  []
.IP LPREFIX
Symbol prefix for ${LEX} (see -P option in lex(1)) [yy]
.IP LD
Linker.  [ld]
.IP LDFLAGS
Options to ${LD} during the link process.  []
.IP LORDER
List dependencies for object files.  [lorder]
.IP MAKE
bmake(1).  [bmake]
.IP NM
List symbols from object files.  [nm]
.IP PC
Pascal compiler.  [pc]  (Not present)
.IP PFLAGS
Options to ${PC}.  []
.\" .IP OBJC
.\" Objective C compiler.  [${CC}]
.\" .IP OBJCFLAGS
.\" Options to ${OBJC}.  [${CFLAGS}]
.IP OBJCOPY
Copy and translate object files.  [objcopy]
.IP OBJDUMP
Display information from object files.  [objdump]
.IP RANLIB
Generate index to archive.  [ranlib]
.IP SIZE
List section sizes and total size.  [size]
.IP STRIP
Discard symbols from object files.  [strip]
.IP TSORT
Topological sort of a directed graph.  [tsort -q]
.IP YACC
LALR(1) parser generator.  [yacc]
.IP YFLAGS
Options to ${YACC}.  []
.IP YHEADER
If defined, add "-d" to YFLAGS, and add dependencies
from <file>.y to <file>.h and <file>.c, and add
<foo>.h to CLEANFILES.
.IP YPREFIX
If defined, add "-p ${YPREFIX}" to YFLAGS.
.IP NOGCCERROR
If defined, prevents passing certain ${CFLAGS} to GCC
that cause warnings to be fatal, such as:
-Werror -Wa,--fatal-warnings
(The latter being for as(1).)
.IP WARNS
Crank up GCC warning options; the distinct levels are (the higher the
more strict):
.VB
    WARNS=1
    WARNS=2
    WARNS=3
    WARNS=4
.VE
.IP PREFIX
Target directory. [/usr/local]
.IP BINDIR
Target directory for utilities. [${PREFIX}/bin]
.IP SBINDIR
Target directory for administration utilities. [${PREFIX}/sbin]
.IP MANDIR
Target directory for man pages. [${PREFIX}/man]
.IP LIBDIR
Target directory for libraries. [${PREFIX}/lib]
.IP LIBEXECDIR
Target directory for system utilities. [${PREFIX}/libexec]
.IP INCSDIR
Target directory for includes. [${PREFIX}/include]
.IP DATADIR
Target directory for architecture-independent text files. [${PREFIX}/share]
.IP SYSCONFDIR
Target directory for configuration files. [${PREFIX}/etc]
.IP INFODIR
Target directory for .info files. [${PREFIX}/info]
.IP MKC_ERR_MSG
If set, keep an error message. []
.SS "mkc.files.mk"
The include file
.B <mkc.files.mk>
handles the FILES variables and is included
from
.BR <mkc.lib.mk> " and " <mkc.prog.mk> .
List of supported variables:
.IP FILES
The list of files to install.
.\" .IP CONFIGFILES Similar semantics to FILES, except that the files
.\"  are installed by the `configinstall' target,
.\"  not the `install' target.
.\"  The FILES* variables documented below also apply.
.IP FILESDIR
The location to install the files. It defaults to
.I ${PREFIX}/bin
.IP FILESDIR_<fn>
The location to install the specific file <fn>.
.IP FILESOWN
File owner. If
.B bmake
is run with root privileges, it defaults to
.I ${BINOWN}
or to `id -u` otherwise.
.IP FILESOWN_<fn>
File owner of the specific file <fn>.
.IP FILESGRP
File group. If
.B bmake
is run with root privileges, it defaults to
.I ${BINGRP}
or to `id -g` otherwise.
.IP FILESGRP_<fn>
File group of the specific file <fn>.
.IP FILESMODE
File mode. It defaults to
.I ${NONBINMODE}
.IP FILESMODE_<fn>
File mode of the specific file <fn>.
.IP FILESNAME
Optional name to install each file as.
.IP FILESNAME_<fn>
Optional name to install <fn> as.
.IP CLEANFILES
Additional files to remove for the
.IR clean ", " cleandir " and " distclean
targets.
.IP DISTCLEANFILES
Additional files to remove for the
.IR cleandir " and " distclean
targets.
.\" .IP FILESBUILD_<fn> A value different from "no" will add the file
 \" to the list of
.\" targets to be built by `realall'.  Users of that variable
.\" should provide a target to build the file.
.\" .IP BUILDSYMLINKS List of two word items:
.\" lnsrc lntgt
.\" For each lnsrc item, create a symlink named lntgt.
.\" The lntgt symlinks are removed by the cleandir target.
.\" .IP UUDECODE_FILES List of files which are stored as <file>.uue in
 \" the source
.\" tree. Each one will be decoded with ${TOOL_UUDECODE}.
.\" The source files have a `.uue' suffix, the generated files do 
.\" not.
.\" .IP UUDECODE_FILES_RENAME_<fn>
.\" Rename the output from the decode to the provided name.
.\" *NOTE: These files are simply decoded, with no install or other
.\" rule applying implicitly except being added to the clean
.\" target.
.SS "mkc.prog.mk"
The include file
.B <mkc.prog.mk>
handles building program from one or
more source files, along with their manual pages.  It has a limited
number of suffixes.
List of supported variables:
.IP PROG
The name of the program to build.  If not supplied, nothing
is built.
.\" .IP PROG_CXX
.\" If defined, the name of the program to build.  Also
.\" causes <mkc.prog.mk> to link the program with the C++
.\" compiler rather than the C compiler.  PROG_CXX overrides
.\" the value of PROG if PROG is also set.
.IP PROGNAME
The name that the above program will be installed as, if
different from ${PROG}.
.IP SRCS
List of source files to build the program.  If SRCS is not
 defined, it's assumed to be ${PROG}.c.
.IP CFLAGS
Additional flags to the compiler when creating C objects.
.IP CPPFLAGS
Additional flags to the C pre-processor.
.IP COPTS
Additional flags to the compiler when creating C objects.
.IP LDADD
Additional objects.  Usually used for libraries.
For example, to link with the compatibility and utility
libraries, use:
.VB
    LDADD+=  -lutil -lcompat
.VE
.IP LDFLAGS
Additional linker flags. Often used for specifying library directories.
.VB
    LDFLAGS+=  -L/opt/company/software/lib
.VE
.IP BINDIR
Target directory for program. It defaults to
.I ${PREFIX}/bin
.IP BINMODE
Binary mode.
.IP BINOWN
File owner. If
.B bmake
is run by an unprivileged user, it defaults to `id -u`.
.IP BINGRP
File group. If
.B bmake
is run by an unprivileged user, it defaults to `id -g`.
.\"  .IP COPTS
.\"  Additional flags to the compiler when creating C objects.
.IP STRIPFLAG
The flag passed to the install program to cause the binary
to be stripped.
.IP SCRIPTS
A list of interpreter scripts (written in shell, awk, lua etc).
These are installed like programs.
.IP SCRIPTSNAME
The name that the above program will be installed as, if
different from ${SCRIPTS}.
.IP SCRIPTSNAME_<script>
Optional name to install <script> as.
.IP SCRIPTSDIR
Target directory for scripts.
It defaults to ${BINDIR}.
.IP SCRIPTSOWN
Script files owner. It defaults to ${BINOWN}.
.IP SCRIPTSGRP
Script file group. It defaults to ${BINGRP}.
.IP SCRIPTSMODE
Script file mode. It defaults to ${BINMODE}.
.IP LINKS
The list of binary links; should be full pathnames, the
linked-to file coming first, followed by the linked
file.  The files are hard-linked.  For example, to link
${BINDIR}/gzip and ${BINDIR}/gunzip, use:
.VB
    LINKS=   ${DESTDIR}/bin/gzip ${DESTDIR}${BINDIR}/gunzip
.VE
.IP SYMLINKS
The list of symbolic links; should be full pathnames.
Syntax is identical to LINKS. Note that DESTDIR is not
automatically included in the link.
.IP MAN
Manual pages (should end in .1 - .9).  If no MAN variable is
defined, "MAN=${PROG}.1" is assumed.
.IP MKMAN
If "no", don't build or install the man pages,
and also acts as "MKCATPAGES=no MKHTML=no".
Default: yes.
.IP MKCATPAGES
If "no", don't build or install the catman pages.
Default: no.
.IP MKHTML
If "no", don't build or install the HTML man pages.
Default: no
.IP MKINFO
If "no", don't build or install Info documentation from
Texinfo source files.
Default: yes
.IP MKSHARE
If "no", act as "MKHTML=no MKINFO=no MKCATPAGES=no MKMAN=no".
I.e, don't build catman pages, man pages, info
documentation,...
Default: yes
.\" .IP "COPTS.<prog> OBJCCOPTS.<prog> LDADD.<prog> CPPFLAGS.<prog> CXXFLAGS.<prog>"
.\" These provide a way to specify additions to the associated
.\" variables in a way that applies only to a particular
.\" program.  <prog> corresponds to
.\" .\" either
.\" PROG.
.\" .\" or PROG_CXX (if set)
.\" For example, if COPTS.foobar is
.\" set to "-g", "-g" will be added to COPTS only when compiling
.\" the "foobar" application.
.IP TEXINFO
List of Texinfo source files.  Info documentation will
consist of single files with the extension replaced by .info.
.IP INFOFLAGS
Flags to pass to makeinfo. The default is empty string.
.PP
.B <mkc.prog.mk>
includes
.B <mkc.files.mk>
and
.B <mkc.own.mk>
and therefore supports all variables supported by them.
.SS "mkc.lib.mk"
The include file
.B <mkc.lib.mk>
has support for building a static or dynanic library.  It has a
limited number of suffixes.
.B <mkc.lib.mk>
sets/uses the following variables:
.IP LIB
The name of the library to build.
.IP LIBDIR
Target directory for libraries. It defaults to 
.IR ${PREFIX}/lib .
.\" .IP SHLIBINSTALLDIR Target directory for shared libraries if
.\" ${USE_SHLIBDIR}
.\" is not "no".
.\" USE_SHLIBDIR If not "no", use ${SHLIBINSTALLDIR} instead of ${LIBDIR}
.\" as the path to install shared libraries to.
.\" USE_SHLIBDIR must be defined before <bsd.own.mk> is included.
.\" Default: no
.IP SHLIB_MAJOR
Major shared library number. If unset, shared library is not built.
.IP SHLIB_MINOR
Minor shared library number.
.IP LIBOWN
Library owner. If
.B bmake
is run by an unprivileged user, it defaults to `id -u`.
.IP LIBGRP
Library group. If
.B bmake
is run by an unprivileged user, it defaults to `id -g`.
.IP LIBMODE
Library mode.
.\" .IP LIBISMODULE
.\" If not "no", install as ${LIB}.so (without the "lib" prefix).
.\" .\" and act as "MKDEBUGLIB=no MKLINT=no MKPICINSTALL=no
.\" .\" MKPROFILE=no MKSTATICLIB=no".
.\" Default: no
.\" .IP LIBISPRIVATE
.\" If not "no", act as MKPIC=no and
.\" , act as "MKDEBUGLIB=no MKLINT=no MKPIC=no
.\" MKPROFILE=no", and
.\" don't install the (.a) library.
.\" This is useful for "build only" helper libraries.
.\" Default: no
.\" .IP LIBISCXX
.\" If not "no", Use ${CXX} instead of ${CC} to link
.\" shared libraries.
.\" This is useful for C++ libraries.
.\" Default: no
.\" .IP LINTLIBDIR
.\" Target directory for lint libraries.
.IP LDADD
Additional objects. See LDADD in section
.I <mkc.prog.mk>
.IP LDFLAGS
Additional linker flags. See LDFLAGS in section
.I <mkc.prog.mk>
.IP MAN
The manual pages to be installed (use a .1 - .9 suffix).
.\" NOCHECKVER_<library>
.\" NOCHECKVER	If set, disables checking for installed shared object
.\" 		libraries with versions greater than the source.  A
.\" 		particular library name, without the "lib" prefix, may
.\" 		be appended to the variable name to disable the check for
.\" 		only that library.
.IP SRCS
List of source files to build the library.  Suffix types
 .s, .c, and .f are supported.  Note, .s files are preferred
 to .c files of the same name.
.\" (This is not the default for
.\"  versions of make.)
.\" LIBDPLIBS	A list of the tuples:
.\" 			libname  path-to-srcdir-of-libname
.\" 		For each tuple;
.\" 		     *	LIBDO.libname contains the .OBJDIR of the library
.\" 			`libname', and if it is not set it is determined
.\" 			from the srcdir and added to MAKEOVERRIDES (the
.\" 			latter is to allow for build time optimization).
.\" 		     *	LDADD gets  -L${LIBDO.libname} -llibname    added.
.\" 		     *	DPADD gets  ${LIBDO.libname}/liblibname.so  or
.\" 				    ${LIBDO.libname}/liblibname.a   added.
.\" 		This variable may be used for individual libraries, as
.\" 		well as in parent directories to cache common libraries 
.\" 		as a build-time optimization.
.\" 
.\" The include file <bsd.lib.mk> includes the file named "../Makefile.inc"
.\" if it exists, as well as the include file <bsd.man.mk>.
.\" 
.\" It has rules for building profiled objects; profiled libraries are
.\" built by default.
.IP INCS
The list of include files.
.IP INCSDIR
The location to install the include files.
.IP INCSNAME
Target name of the include file, if only one; same as
FILESNAME, but for include files.
.IP INCSNAME_<file>
The name file <file> should be installed as, if not <file>,
same as FILESNAME_<file>, but for include files.
.IP MKPIC
If "no", don't build or install shared libraries, and
also acts as "MKPICLIB=no"
Default: yes (for MACHINE_ARCHs that support it)
.IP MKPICINSTALL
If "no", don't install the *_pic.a libraries.
Default: no
.IP MKPROFILE
If "no", don't build or install the profiling (*_p.a) libraries.
Default: no
.\" .IP "COPTS.lib<lib> OBJCCOPTS.lib<lib> LDADD.lib<lib> CPPFLAGS.lib<lib> CXXFLAGS.lib<lib>"
.\" These provide a way to specify additions to the associated
.\" variables in a way that applies only to a particular
.\" library.  <lib> corresponds to a LIB variable.
.\" For example, if COPTS.libfoobar is
.\" set to "-g", "-g" will be added to COPTS only when compiling
.\" the "libfoobar" library.
.IP TEXINFO
The same as in
.B <mkc.prog.mk>
.IP INFOFLAGS
The same as in
.B <mkc.prog.mk>
.PP
Libraries are ranlib'd when made.
.B <mkc.lib.mk>
includes
.B <mkc.files.mk>
and therefore supports all variables supported by it.
.SS "mkc.subdir.mk"
The include file
.B <mkc.subdir.mk>
contains the default targets for building
subdirectories.  It has the same targets as
.BR <mkc.prog.mk> .
For all of
the directories listed in the variable SUBDIR, the specified directory 
will be visited and the target made.  There is also a default target which
allows the command "make subdir" where subdir is any directory listed in
the variable SUBDIR.

As a special case, the use of a token
.WAIT
as an entry in SUBDIR acts
as a synchronization barrier when multiple make jobs are run; subdirs
before the 
.WAIT
must complete before any subdirs after .WAIT are
started.  See
.B bmake(1)
for some caveats on use of .WAIT and other
special sources.
.SS "mkc.configure.mk"
.IP MKC_CHECK_HEADERS
List of headers to be checked.
As a result of the check bmake's variable
.B HAVE_HEADER.<header>
is set to
either 0 or 1.
.br
<header>: tr|./|__|g
.br
Also -DHAVE_HEADER_<HEADER>=(0 or 1)
is added to CFLAGS unless MKC_NOAUTO is set to 1.
.br
<HEADER>: tr|a-z./|A-Z__|g
.VB

 Ex:  MKC_CHECK_HEADERS += sys/time.h fcntl.h execinfo.h
 Res: HAVE_HEADER.sys_time_h = 1
      HAVE_HEADER.fcntl_h    = 1
      HAVE_HEADER.execinfo_h = 1
      CFLAGS += -DHAVE_HEADER_SYS_TIME_H=1 -DHAVE_HEADER_FCNTL=1
.VE
.IP MKC_REQUIRE_HEADERS
The same as MKC_CHECK_HEADERS, but absense of header is
treated as a fatal error (See
.B error-check
target.
.IP MKC_CHECK_FUNCLIBS
List of <function>:<library> pairs to be checked,
<library> part is optional. If <library> is present,
presense of <function> in libc is also checked automatically.

As a result of the check bmake's variable
HAVE_FUNCLIB.<function>.<library> (or HAVE_FUNCLIB.<function>)
is set to either 0 or 1.

By default, if <function> is found in <library> but not in libc,
"-l<library>" is automatically added to LDADD unless
<function>:<library> is listed in MKC_NOAUTO_FUNCLIBS or
MKC_NOAUTO_FUNCLIBS is equal to 1 or
MKC_NOAUTO is set to 1
.VB

 Ex:  MKC_CHECK_FUNCLIBS  += strlcat fgetln getline getopt_long
      MKC_CHECK_FUNCLIBS  += crypt:crypt dlopen:dl nanosleep:rt
      MKC_CHECK_FUNCLIBS  += ftime:compat gettimeofday
      MKC_NOAUTO_FUNCLIBS += ftime:compat
 Res: HAVE_FUNCLIB.strlcat      = 1
      HAVE_FUNCLIB.fgetln       = 1
      HAVE_FUNCLIB.getline      = 0
      HAVE_FUNCLIB.getopt_long  = 1
      HAVE_FUNCLIB.crypt        = 0
      HAVE_FUNCLIB.crypt.crypt  = 1
      HAVE_FUNCLIB.dlopen       = 1
      HAVE_FUNCLIB.dlopen.dl    = 0
      HAVE_FUNCLIB.nanosleep    = 1
      HAVE_FUNCLIB.nanosleep.rt = 1
      HAVE_FUNCLIB.ftime        = 0
      HAVE_FUNCLIB.ftime.compat = 1
      HAVE_FUNCLIB.gettimeofday = 1
      LDADD += -lcrypt
.VE
.IP MKC_REQUIRE_FUNCLIBS
The same as MKC_CHECK_FUNCLIBS, but absense of funclib is
treated as a fatal error (See
.B error-check
target.
.IP MKC_SOURCE_FUNCLIBS
The same as MKC_CHECK_FUNCLIBS, but if <function> is absent
both in the specified <library> and in libc, function.c is
added to SRCS unless MKC_NOAUTO=1.
.VB

 Ex:  MKC_SOURCE_FUNCLIBS+= getline
 Res: SRCS+= getline.c
      HAVE_FUNCLIB.getline= 0
.VE
.IP MKC_CHECK_DEFINES
List of define:header to check. <header> part is optional.

As a result of the check bmake's variable
HAVE_DEFINE.<define>.<header> (or HAVE_DEFINE.<define>)
is set to either 0 or 1.
.br
<header>: tr|./|__|g
.br
Also -DHAVE_DEFINE_<DEFINE>_<HEADER>=1
or   -DHAVE_DEFINE_<DEFINE>=1
is added to CFLAGS if the specified define was detected
unless MKC_NOAUTO is set to 1.
.br
<HEADER>: tr|a-z./|A-Z__|g
.br
<DEFINE>: tr|a-z|A-Z|g
.VB

 Ex:  MKC_CHECK_DEFINES += RTLD_LAZY:dlfcn.h __GNUC__ _MSC_VER_
 Res: HAVE_DEFINE.RTLD_LAZY.dlfcn_h = 1
      HAVE_DEFINE.__GNUC__          = 1
      HAVE_DEFINE._MSC_VER_         = 0
      CFLAGS += -DHAVE_DEFINE_RTLD_LAZY_DLFCN_H=1 \\
                -DHAVE_DEFINE___GNUC__=1
.VE
.IP MKC_REQUIRE_DEFINES
The same as MKC_CHECK_DEFINES, but absense of the define is
treated as a fatal error (See
.B error-check
target.
.IP MKC_CHECK_TYPES
List of type:header to check. <header> part is optional.

As a result of the check bmake's variable
HAVE_TYPE.<type>.<header> (or HAVE_TYPE.<type>)
is set to either 0 or 1.
.br
<header>: tr|./|__|g

Also -DHAVE_TYPE_<TYPE>_<HEADER>=1 (or   -DHAVE_TYPE_<TYPE>=1)
is added to CFLAGS if the specified type was detected
unless MKC_NOAUTO is set to 1.
.br
<HEADER>: tr|a-z./|A-Z__|g
.br
<TYPE>:   tr|a-z|A-Z|g
.VB

 Ex:  MKC_CHECK_TYPES += size_t:string.h
 Res: HAVE_TYPE.size_t.string_h = 1
      CFLAGS += -DHAVE_TYPE_SIZE_T_STRING_H=1
.VE
.IP MKC_REQUIRE_TYPES
The same as MKC_CHECK_TYPES, but absense of the type declaration is
treated as a fatal error (See
.B error-check
target.
.IP MKC_CHECK_VARS
List of variable:header to check. <header> part is optional.
       
As a result of the check bmake's variable
HAVE_DEFINE.<variable>.<header> (or HAVE_DEFINE.<variable>)
is set to either 0 or 1
.br
<header>: tr|./|__|g
.br
Also -DHAVE_DEFINE_<VARIABLE>_<HEADER>=1
(or -DHAVE_DEFINE_<VARIABLE>=1)
is added to CFLAGS if the specified variable was detected
unless MKC_NOAUTO is set to 1.
.br
<HEADER>: tr|a-z./|A-Z__|g
.VB

 Ex:  MKC_CHECK_VARS += sys_errlist:errno.h
 Res: HAVE_VAR.sys_errlist.errno_h = 1
      CFLAGS += -DHAVE_VAR_SYS_ERRLIST_ERRNO_H
.VE
.IP MKC_REQUIRE_VARS
The same as MKC_CHECK_VARS, but absense of the variable declaration is
treated as a fatal error (See
.B error-check
target.
.IP MKC_CHECK_MEMBERS
List of <type>.<member>:<header> to check.
<header> part is optional.

As a result of the check bmake's variable
HAVE_MEMBER.<type>_<member>.<header>
(or HAVE_MEMBER.<type>_<member>)
is set to either 0 or 1 depending on the result.
.br
<header>: tr|./|__|g
.br
Also -DHAVE_MEMBER_<TYPE>_<MEMBER>_<HEADER>=1
(or   -DHAVE_MEMBER_<TYPE>_<MEMBER>=1)
is added to CFLAGS if the specified member was found in
appropriate type
unless MKC_NOAUTO is set to 1.
.br
<HEADER>: tr|a-z./|A-Z__|g
.br
<TYPE>:   tr|a-z./|A-Z__|g
.br
<MEMBER>: tr|a-z./|A-Z__|g
.VB

   Ex:  MKC_CHECK_VARS += struct-ifreq.ifr_ifrn.ifrn_name:net/if.h
        MKC_CHECK_VARS += struct-tm.tm_isdst:time.h
   Res: HAVE_MEMBER.struct_ifreq_ifr_ifrn_ifrn_name.net_if_h=1
        HAVE_MEMBER.struct_tm_tm_isdst.time_h=1
        CFLAGS += -DHAVE_MEMBER_STRUCT_IFREQ_IFR_IFRN_IFRN_NAME_NET_IF_H=1
        CFLAGS += -DHAVE_MEMBER_STRUCT_TM_TM_ISDST_TIME_H=1
.VE
.IP MKC_REQUIRE_MEMBERS
The same as MKC_CHECK_MEMBERS, but absense of the member is
treated as a fatal error (See
.B error-check
target.
.IP MKC_CHECK_FUNCS<N>
List of <func>:<header> to be check. <header> part is optional.

As a result of the check bmake's variable
HAVE_FUNC<N>.<func>.<header> (or HAVE_FUNC<N>.<func>)
is set to either 0 or 1.
.br
<header>: tr|./|__|g
.br
Also -DHAVE_FUNC<N>_<FUNC>_<HEADER>=(0 or 1)
(or   -DHAVE_FUNC<N>_<FUNC>=(0 or 1))
is added to CFLAGS if the specified function was detected
unless MKC_NOAUTO is set to 1.
.br
<HEADER>: tr|a-z./|A-Z__|g
.VB

 Ex:  MKC_CHECK_FUNCS2 += fgetln:stdio.h
      MKC_CHECK_FUNCS6 += pselect:sys/select.h
 Res: HAVE_FUNC2.fgetln.stdio_h = 1
      HAVE_FUNC6.pselect.sys.select_h = 1
      CFLAGS += -DHAVE_FUNC2_FGETLN_STDIO_H=1 \\
             += -DHAVE_FUNC6_PSELECT_SYS_SELECT_H=1
.VE
.IP MKC_REQUIRE_FUNCS<N>
The same as MKC_CHECK_FUNCS<N>, but absense of the function declaration is
treated as a fatal error (See
.B error-check
target.
.IP MKC_CHECK_CUSTOM
List of custom checks (list of names).
MKC_CUSTOM_FN.<custom_check_name> is a
"C" source filename for your custom check,
e.g., filename.c.

As a result of the check bmake's variable
HAVE_CUSTOM.<custom_check_name>
is set to 1 if compilation of
MKC_CUSTOM_FN.<custom_check_name> succeeded
or 0 otherwise. If MKC_CUSTOM_FN.<custom_check_name>
is not specified it defaults to custom_check_name.c

Also -DHAVE_CUSTOM_<CUSTOM_CHECK_NAME>=1
is added to CFLAGS if the specified check succeeded
unless MKC_NOAUTO is set to 1.
.br
<CUSTOM_CHECK_NAME>: tr|a-z|A-Z|g
.VB

 Ex.  MKC_CHECK_CUSTOM+=               nested_funcs
      MKC_CUSTOM_FN.nested_funcs=      nested_funcs.c
 Res. HAVE_CUSTOM.nested_funcs=        1
      CFLAGS+= -DHAVE_CUSTOM_NESTED_FUNCS=1
.VE
.IP MKC_REQUIRE_CUSTOM
The same as MKC_CHECK_CUSTOM, but failure is
treated as a fatal error (See
.B error-check
target.
.IP MKC_CUSTOM_DIR
.IP MKC_CHECK_PROGS
List of <progname>s to check.

As a result of the check bmake's variable
HAVE_PROG.<progname> is set to either 1 (true) or 0 (false).
Also PROG.<progname> is set to a full path of a program
or to an empty string.
.VB

 Ex:  MKC_CHECK_PROGS += lua ruby gawk runawk
 Res: HAVE_PROG.lua             = 1
      PROG.lua                  = /usr/pkg/bin/lua
      HAVE_PROG.ruby            = 0
      HAVE_PROG.gawk            = 1
      PROG.gawk                 = /usr/bin/gawk
      HAVE_PROG.runawk          = 1
      PROG.runawk               = /usr/pkg/bin/runawk
.VE
.IP MKC_REQUIRE_PROGS
The same as MKC_CHECK_PROGS, but absense of program is
treated as a fatal error (See
.B error-check
target.
.IP MKC_CHECK_SIZEOF
List of <type>:<header> to check. <header> part is optional.

As a result of the check bmake's variable
SIZEOF.<type>.<header> (or SIZEOF.<type>)
is set to the data type size or string "failed".
.br
<type>: tr|*-|P_|g
.br
<header>: tr|/.|__|g
.br
Also -DSIZEOF_<TYPE>_<HEADER>=<failed|1|2|...>
(or -DSIZEOF_<TYPE>=<failed|1|2|...>)
is added to CFLAGS
if sizeof() check was successful
unless MKC_NOAUTO is set to 1
.br
<TYPE>: tr|a-z*-|A-ZP_|g
.br
<HEADER>: tr|a-z/.|A-Z__|g
.br
.VB

 Ex:  MKC_CHECK_SIZEOF += void*
      MKC_CHECK_SIZEOF += long-long off_t:sys/types.h
 Res: SIZEOF.voidP             = 4
      SIZEOF.long_long         = 4
      SIZEOF.off_t.sys_types_h = 8
      CFLAGS += -DSIZEOF_VOIDP=4 \\
                -DSIZEOF_LONG_LONG=4 \\
                -DSIZEOF_OFF_T_SYS_TYPES_H=8
.VE
.IP MKC_NOAUTO_FUNCLIBS
.IP MKC_NOAUTO
.IP MKC_COMMON_HEADERS
.IP MKC_COMMON_DEFINES
List of defines always passed to compiler
in MKC_CHECK_{DEFINES,VARS,FUNCS<N>,SIZEOF} checks.
.VB

   Ex: MKC_COMMON_DEFINES += -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64 # Linux
       MKC_COMMON_DEFINES += -D_ALL_SOURCE # Interix
.VE
.IP MKC_COMMON_DEFINES.<OPSYS>
The same as MKC_COMMON_DEFINES but only for OPSYS (uname -s).
.VB

   Ex: MKC_COMMON_DEFINES.Linux   += -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64
       MKC_COMMON_DEFINES.Interix += -D_ALL_SOURCE
.VE
.IP MKC_CACHEDIR
.IP MKC_SHOW_CACHED
.IP MKC_DELETE_TMPFILES
.IP MKC_SHELL
.IP MKC_NOCACHE
.SS "mkc.intexts.mk"
.B <mkc.intexts.mk>
is an auxiliary include file that converts <fn>.in files to <fn> by
expanding the following @@ patterns:

.VB
 "Pattern     Result"
----------------------
@prefix@       ${PREFIX}
@bindir@       ${BINDIR}
@mandir@       ${MANDIR}
@sbindir@      ${SBINDIR}
@libdir@       ${LIBDIR}
@libexecdir@   ${LIBEXECDIR}
@datadir@      ${DATADIR}
@sysconfdir@   ${SYSCONFDIR}
@incsdir@      ${INCSDIR}
.VE

.B <mkc.intexts.mk>
supports the following variables:
.IP INFILES
List of files that needs to be generated.
.IP INSCRIPTS
List of scripts that needs to be generated.
.IP INTEXTS_SED
List of additional
.B sed(1)
expressions for expanding, e.g.
.VB
    INTEXTS_SED+=   -e 's,@version@,${VERSION},g'
.VE
.\" .SS "mkc.pkg-config.mk"
.\" lalala
.SH AUTHOR
Aleksey Cheusov <vle@gmx.net>
